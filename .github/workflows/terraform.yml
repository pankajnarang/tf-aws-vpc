on:
    push:
      branches:
        - main
    pull_request:
      branches:
        - main
      types: [opened, synchronize]
  
env:
    AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  
jobs:
    # run validation and format on the module code
    terraform-module:
      name: Terraform module validation
      timeout-minutes: 10
      runs-on: ubuntu-latest
  
      defaults:
        run:
          shell: bash
  
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Install Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.6.6"
  
        - name: Terraform init
          id: init
          run: terraform init
  
        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
  
        - name: Terraform validate
          id: validate
          run: terraform validate -no-color
  
    terraform-example-basic:
      # run validations, format, plan on the examples code to test
      name: Terraform module example run basic
      timeout-minutes: 30
      runs-on: ubuntu-latest
      permissions:
        contents: write
        pull-requests: write
        repository-projects: write
  
      defaults:
        run:
          shell: bash
          working-directory: examples/basic
      
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Install Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.6.6"
  
        - name: Terraform init
          id: init
          run: terraform init
  
        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
  
        - name: Terraform validate
          id: validate
          run: terraform validate -no-color
  
        - name: Terraform plan
          id: plan
          run: terraform plan -no-color
  
        - uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Basic Example')
              })
    
              // 2. Prepare format of the comment
              const output = `### Basic Example
              #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>
    
              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`
    
              </details>
    
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
              <details><summary>Show Plan</summary>
    
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
    
              </details>
    
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                   repo: context.repo.repo,
                  comment_id: botComment.id,
                   body: output
                 })
               } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                   owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                 })
              }
  
    terraform-example-advanced:
      # run validations, format, plan on the examples code to test
      name: Terraform module example run advanced
      timeout-minutes: 30
      runs-on: ubuntu-latest
      permissions:
        contents: write
        pull-requests: write
        repository-projects: write
  
      defaults:
        run:
          shell: bash
          working-directory: examples/advanced
      
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: Install Terraform
          uses: hashicorp/setup-terraform@v3
          with:
            terraform_version: "1.6.6"
  
        - name: Terraform init
          id: init
          run: terraform init
  
        - name: Terraform fmt
          id: fmt
          run: terraform fmt -check
  
        - name: Terraform validate
          id: validate
          run: terraform validate -no-color
  
        - name: Terraform plan
          id: plan
          run: terraform plan -no-color
  
        - uses: actions/github-script@v6
          if: github.event_name == 'pull_request'
          env:
            PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              // 1. Retrieve existing bot comments for the PR
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
              })
              const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Advanced Example')
              })
    
              // 2. Prepare format of the comment
              const output = `### Advanced Example
              #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
              #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
              #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>
    
              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`
    
              </details>
    
              #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
              <details><summary>Show Plan</summary>
    
              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`
    
              </details>
    
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
              // 3. If we have a comment, update it, otherwise create a new one
              if (botComment) {
                github.rest.issues.updateComment({
                  owner: context.repo.owner,
                   repo: context.repo.repo,
                  comment_id: botComment.id,
                   body: output
                 })
               } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                   owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
                 })
              }